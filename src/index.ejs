<html>

<head>
	<title>Pixi Hotwire</title>
	<script type="text/javascript" src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" integrity="sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g==" crossorigin="anonymous" referrerpolicy="no-referrer" />
	<link href="https://unpkg.com/tabulator-tables@5.4.4/dist/css/tabulator.min.css" rel="stylesheet">
	<meta id="viewport" name="viewport"
		content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no, viewport-fit=cover" />
	<meta name="apple-mobile-web-app-capable" content="yes">

	<style>
		html,
		body {
			margin: 0;
			padding: 0;
		}

		.grid-panel {

		    background-color: #ccc;
		    display: flex;
		    justify-content: center;
		    align-items: center;
		    border: 1px solid #999;

			height: fit-content;
		}


		.layout0 {
		    grid-template-areas:
		        "A B"
		        "C C";
		    grid-template-columns: auto minmax(0, 3fr);
		    grid-template-rows: auto 1fr;
		}

		.layout1 {
		    grid-template-areas:
		        "A"
		        "C";
		    grid-template-columns: 1fr;
		    grid-template-rows: auto 1fr;
		}

		.layout2 {
		    grid-template-areas:
		        "A"
		        "B"
		        "C";
		    grid-template-columns: 1fr;
		    grid-template-rows: auto auto 1fr;
		}

		.layout3 {
		    grid-template-areas:
		        "A";
		    grid-template-columns: 1fr;
		    grid-template-rows: 1fr;
		}

		#summary-content {
			background: #000000;
		}
		#pixi-content {
			background: #000000;
		}

		.beholder-table {
            overflow: hidden;
			width: 100%;
		}

		.beholder-media {
			width: 25%;
			min-width: 500px;
            resize: horizontal;
            overflow: hidden;
        }

        .beholder-media-controls {
            display: flex;
            background: #c1c1c1;
            padding: 2px;
        }

        .beholder-media-control {
            margin: 0 5px;
            display: flex;
        }

        .beholder-media-control > i {
            height: min-content;
            margin: auto;
        }

        .beholder-media-control > .slider {
            margin: 0 auto;
            height: auto;
			width: 50px;
        }

        .beholder-media-control > span {
            display: inline-flex;
            align-items: center;
            font-size: 16px;
            justify-content: space-between;
            font-family: "Inconsolata; mono";
        }

		.beholder-timeline {
			display: flex;
		}

		.beholder-channel-panel-container {
			display: flex;
			flex-direction: column;
		}
		.beholder-channel-controls {
			display: flex;
		}
		.beholder-summary-panel {
			display: flex;
			flex: auto;
		}
		.beholder-summary-panel .beholder-channel-buttons {
			padding: 5px;
		}
		.beholder-summary-panel-left {
			padding: 5px;
			width: 20px;
		}
		.beholder-summary-panel-right {
			padding: 10px;
			width: 100%;
		}
		.beholder-summary-panel-right input {
			width: 75px;
		}

		.beholder-ruler-panel {
			display: flex;
			border-top: 1px solid #515151;
			border-right: 1px dashed #515151;
			box-sizing: border-box;
		}
		.beholder-channel-panel {
			resize: vertical;
			overflow: hidden;
			display: flex;
			border-top: 1px solid #515151;
			border-right: 1px dashed #515151;
			box-sizing: border-box;
		}
		.beholder-channel-names {
			color: #515151;
			font-size: 12px;
		}
		.beholder-channel-buttons {
			display: flex;
			flex-direction: column;
			padding-left: 2px;
		}
		.beholder-channel-buttons > button {
			  width: 10px;
			  height: 10px;
			  padding: 0;
			  margin: 0;
			  font-family: monospace;
			  font-size: 8px;
			  line-height: 0;
			  border-radius: 0;
			}
		body {
			margin-top: 10px;
		}

		.tabulator-header-filter > input {
			height: 50% !important;
		}

		.tabulator {
			font-size: 12px;
		}
	</style>

</head>

<body>
	<noscript>Please enable JavaScript in your web browser to view this page.</noscript>

	<div class="btn-group" role="group" aria-label="Basic example">
	  <button type="button" class="btn btn-secondary">default</button>
	  <button type="button" class="btn btn-secondary">vertical</button>
	  <button type="button" class="btn btn-secondary">two</button>
	  <button type="button" class="btn btn-secondary">one</button>
	</div>

	<div id="controller" style="display: grid; margin: auto; max-width: 2000px; width: 90%; border: solid black 1px;">
	</div>
	<button id="download">save</button>
	<script>
		let controller;
		setTimeout(() => {
		const config = {
		    timeline: {
		        backgroundColor: 0x1e1e1e
		    }
		}


		fetch("./test.json")
		    .then((response) => response.json())
		    .then((json) => {
				const schema = {
					"modifiers": [
						{
							"key": "sequence_id",
							"name": "sequence id",
							"type": "input"
						},
						{
							"key": "position",
							"name": "position",
							"type": "list",
					  		"options": ["Fb", "Sb", "Fpursuit", "Fpost", "Spost", "Fpre", "Spre", "Fins", "Sins", "Fcounter", "phatic", "SCT"],
							"editorParams": {
								clearable: true,
								autocomplete: true,
								valuesLookup: "active",
								allowEmpty: true,
								listOnEmpty: true
							}
						},
						{
							"key": "pursuit",
							"name": "pursuit",
							"type": "checkbox",
							"editorParams": {
								"tristate": true,
								"indeterminateValue": null 
							}
						},
						{
							"key": "repair",
							"name": "repair",
							"type": "list",
							"options": ["self", "other", "third"],
							"editorParams": {
								clearable: true,
								autocomplete: true,
								valuesLookup: "active",
								allowEmpty: true,
								listOnEmpty: true
							}
						},
						{
							"key": "trouble",
							"name": "trouble",
							"type": "list",
							"options": ["position", "fit", "composition", "articulation", "syntax", "word", "other"],
							"editorParams": {
								clearable: true,
								autocomplete: true,
								valuesLookup: "active",
								allowEmpty: true,
								listOnEmpty: true
							}
						},
						{
							"key": "target_word",
							"name": "target word",
							"type": "list",
							"options": ["@name", "@deictic", "@noun", "@verb", "@attribute", "@unknown"],
							"editorParams": {
								clearable: true,
								autocomplete: true,
								valuesLookup: "active",
								allowEmpty: true,
								listOnEmpty: true
							}
						}
					]
				}

				config["schema"] = schema;

				controller = new beholder.Annotator(document.getElementById("controller"), json.timeline.startTime, json.timeline.endTime, config);
		        controller.readState(json);
				//json.timeline.channels.slice(0,2).forEach(c => controller.createChannel(c));
				//controller.media.readState(json.media);
		    });

		document.addEventListener("keypress", event => {
		    console.log(event);
			if (controller.textediting) return;
		    if (event.key === "z") {
		        controller.undo();
		    }
		    if (event.key === "y") {
		        controller.redo();
		    }
		    if (event.key === " ") {
				event.preventDefault();
				controller.playpause();
		    }
		    if (event.key === "+") {
		        event.preventDefault();
				controller.speedUp(2);
		    }
		    if (event.key === "-") {
		        event.preventDefault();
				controller.slowDown(2);
		    }
		    if (event.key === "Delete") {
				controller.deleteSelectedAnnotations();
		    }
		    if (event.key === "Escape") {
				controller.deselectAll();
		    }
			if (event.key == ">") {
				controller.cycleLayout(1);
			}
			if (event.key == "<") {
				controller.cycleLayout(-1);
			}
		});
		document.addEventListener("keydown", event => {
			if (controller.textediting) return;
		    if (event.key === "ArrowRight") {
				if (event.shiftKey) {
		        	controller.stepForward(30);
				} if (event.ctrlKey) {
		        	controller.shiftTimelineAnnotationForward();
				} else {
		        	controller.stepForward();
				}
		    }
		    if (event.key === "ArrowLeft") {
				if (event.shiftKey) {
		        	controller.stepBackward(30);
				} if (event.ctrlKey) {
		        	controller.shiftTimelineAnnotationBackward();
				} else {
		        	controller.stepBackward();
				}
		    }
		    if (event.key === "Delete") {
				controller.deleteSelectedAnnotations();
		    }
		    if (event.key === "Escape") {
				controller.deselectAll();
		    }
			console.log(event.key);
		});
		document.querySelector("#download")?.addEventListener("click", (event) => {
		    const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(controller.json()));
		    const dlAnchorElem = document.createElement("a");
		    dlAnchorElem.setAttribute("href",     dataStr     );
		    dlAnchorElem.setAttribute("download", "annotation.json");
		    dlAnchorElem.click();
		});
		}, 1000);

		</script>
</body>

</html>