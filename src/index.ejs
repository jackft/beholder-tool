<html>

<head>
	<title>Pixi Hotwire</title>
	<script type="text/javascript" src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" integrity="sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g==" crossorigin="anonymous" referrerpolicy="no-referrer" />
	<link href="https://unpkg.com/tabulator-tables@5.4.4/dist/css/tabulator.min.css" rel="stylesheet">
	<meta id="viewport" name="viewport"
		content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no, viewport-fit=cover" />
	<meta name="apple-mobile-web-app-capable" content="yes">
	<link rel="stylesheet" href="style.css" />
	<style>
    html,
    body {
        margin: 0;
        padding: 0;
    }
    body {
        margin-top: 10px;
    }

    .tabulator-header-filter > input {
        height: 50% !important;
    }

    .tabulator {
        font-size: 12px;
    }
	</style>

</head>

<body>
	<noscript>Please enable JavaScript in your web browser to view this page.</noscript>

	<div class="btn-group" role="group" aria-label="Basic example">
	  <button type="button" class="btn btn-secondary">default</button>
	  <button type="button" class="btn btn-secondary">vertical</button>
	  <button type="button" class="btn btn-secondary">two</button>
	  <button type="button" class="btn btn-secondary">one</button>
	</div>

	<div id="controller" style="display: grid; margin: auto; max-width: 2000px; width: 90%; border: solid black 1px;">
	</div>
	<button id="download">save</button>
	<script>
		let controller;
		setTimeout(() => {
		const config = {
		    timeline: {
		        backgroundColor: 0x1e1e1e
		    }
		}


		fetch("./test.json")
		    .then((response) => response.json())
		    .then((json) => {
				const schema = {
					"modifiers": [
						{
							"key": "sequence_id",
							"name": "sequence id",
							"type": "input"
						},
						{
							"key": "position",
							"name": "position",
							"type": "list",
					  		"options": ["Fb", "Sb", "Fpursuit", "Fpost", "Spost", "Fpre", "Spre", "Fins", "Sins", "Fcounter", "phatic", "SCT"],
							"editorParams": {
								clearable: true,
								autocomplete: true,
								valuesLookup: "active",
								allowEmpty: true,
								listOnEmpty: true
							}
						},
						{
							"key": "pursuit",
							"name": "pursuit",
							"type": "checkbox",
							"editorParams": {
								"tristate": true,
								"indeterminateValue": null 
							}
						},
						{
							"key": "repair",
							"name": "repair",
							"type": "list",
							"options": ["self", "other", "third"],
							"editorParams": {
								clearable: true,
								autocomplete: true,
								valuesLookup: "active",
								allowEmpty: true,
								listOnEmpty: true
							}
						},
						{
							"key": "trouble",
							"name": "trouble",
							"type": "list",
							"options": ["position", "fit", "composition", "articulation", "syntax", "word", "other"],
							"editorParams": {
								clearable: true,
								autocomplete: true,
								valuesLookup: "active",
								allowEmpty: true,
								listOnEmpty: true
							}
						},
						{
							"key": "target_word",
							"name": "target word",
							"type": "list",
							"options": ["@name", "@deictic", "@noun", "@verb", "@attribute", "@unknown"],
							"editorParams": {
								clearable: true,
								autocomplete: true,
								valuesLookup: "active",
								allowEmpty: true,
								listOnEmpty: true
							}
						}
					]
				}

				config["schema"] = schema;

				controller = new beholder.Annotator(document.getElementById("controller"), json.timeline.startTime, json.timeline.endTime, config);
		        controller.readState(json);
				//json.timeline.channels.slice(0,2).forEach(c => controller.createChannel(c));
				//controller.media.readState(json.media);
		    });

		document.addEventListener("keypress", event => {
		    console.log(event);
			if (controller.textediting) return;
		    if (event.key === "z") {
		        controller.undo();
		    }
		    if (event.key === "y") {
		        controller.redo();
		    }
		    if (event.key === " ") {
				event.preventDefault();
				controller.playpause();
		    }
		    if (event.key === "+") {
		        event.preventDefault();
				controller.speedUp(2);
		    }
		    if (event.key === "-") {
		        event.preventDefault();
				controller.slowDown(2);
		    }
		    if (event.key === "Delete") {
				controller.deleteSelectedAnnotations();
		    }
		    if (event.key === "Escape") {
				controller.deselectAll();
		    }
			if (event.key == ">") {
				controller.cycleLayout(1);
			}
			if (event.key == "<") {
				controller.cycleLayout(-1);
			}
			if (event.key == "g") {
				controller.groupSelectedAnnotations();
			}
		});
		document.addEventListener("keydown", event => {
			if (controller.textediting) return;
		    if (event.key === "ArrowUp") {
				controller.cycleChannel(-1);
		    }
		    if (event.key === "ArrowDown") {
				controller.cycleChannel(1);
		    }
		    if (event.key === "ArrowRight") {
				if (event.shiftKey) {
		        	controller.stepForward(30);
				} if (event.ctrlKey) {
		        	controller.shiftTimelineAnnotationForward();
				} else {
		        	controller.stepForward();
				}
		    }
		    if (event.key === "ArrowLeft") {
				if (event.shiftKey) {
		        	controller.stepBackward(30);
				} if (event.ctrlKey) {
		        	controller.shiftTimelineAnnotationBackward();
				} else {
		        	controller.stepBackward();
				}
		    }
		    if (event.key === "Delete") {
				controller.deleteSelectedAnnotations();
		    }
		    if (event.key === "Escape") {
				controller.deselectAll();
		    }
			console.log(event.key);
		});
		document.querySelector("#download")?.addEventListener("click", (event) => {
		    const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(controller.json()));
		    const dlAnchorElem = document.createElement("a");
		    dlAnchorElem.setAttribute("href",     dataStr     );
		    dlAnchorElem.setAttribute("download", "annotation.json");
		    dlAnchorElem.click();
		});
		}, 1000);

		</script>
</body>

</html>